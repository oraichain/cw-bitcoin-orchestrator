/**
* This file was automatically generated by @oraichain/ts-codegen@0.35.9.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @oraichain/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import {Uint128, InstantiateMsg, Coin, ExecuteMsg, Metadata, DenomUnit, QueryMsg, DenomsByCreatorResponse, FullDenomResponse, MetadataResponse} from "./Tokenfactory.types";
export interface TokenfactoryReadOnlyInterface {
  contractAddress: string;
  getDenom: ({
    creatorAddress,
    subdenom
  }: {
    creatorAddress: string;
    subdenom: string;
  }) => Promise<FullDenomResponse>;
  getMetadata: ({
    denom
  }: {
    denom: string;
  }) => Promise<MetadataResponse>;
  denomsByCreator: ({
    creator
  }: {
    creator: string;
  }) => Promise<DenomsByCreatorResponse>;
}
export class TokenfactoryQueryClient implements TokenfactoryReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.getDenom = this.getDenom.bind(this);
    this.getMetadata = this.getMetadata.bind(this);
    this.denomsByCreator = this.denomsByCreator.bind(this);
  }

  getDenom = async ({
    creatorAddress,
    subdenom
  }: {
    creatorAddress: string;
    subdenom: string;
  }): Promise<FullDenomResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_denom: {
        creator_address: creatorAddress,
        subdenom
      }
    });
  };
  getMetadata = async ({
    denom
  }: {
    denom: string;
  }): Promise<MetadataResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_metadata: {
        denom
      }
    });
  };
  denomsByCreator = async ({
    creator
  }: {
    creator: string;
  }): Promise<DenomsByCreatorResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      denoms_by_creator: {
        creator
      }
    });
  };
}
export interface TokenfactoryInterface extends TokenfactoryReadOnlyInterface {
  contractAddress: string;
  sender: string;
  createDenom: ({
    metadata,
    subdenom
  }: {
    metadata?: Metadata;
    subdenom: string;
  }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  changeDenomOwner: ({
    denom,
    newAdminAddress
  }: {
    denom: string;
    newAdminAddress: string;
  }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  changeAdmin: ({
    denom,
    newAdminAddress
  }: {
    denom: string;
    newAdminAddress: string;
  }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  mintTokens: ({
    amount,
    denom,
    mintToAddress
  }: {
    amount: Uint128;
    denom: string;
    mintToAddress: string;
  }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  burnTokens: ({
    amount,
    burnFromAddress,
    denom
  }: {
    amount: Uint128;
    burnFromAddress: string;
    denom: string;
  }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  forceTransfer: ({
    amount,
    denom,
    fromAddress,
    toAddress
  }: {
    amount: Uint128;
    denom: string;
    fromAddress: string;
    toAddress: string;
  }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class TokenfactoryClient extends TokenfactoryQueryClient implements TokenfactoryInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.createDenom = this.createDenom.bind(this);
    this.changeDenomOwner = this.changeDenomOwner.bind(this);
    this.changeAdmin = this.changeAdmin.bind(this);
    this.mintTokens = this.mintTokens.bind(this);
    this.burnTokens = this.burnTokens.bind(this);
    this.forceTransfer = this.forceTransfer.bind(this);
  }

  createDenom = async ({
    metadata,
    subdenom
  }: {
    metadata?: Metadata;
    subdenom: string;
  }, _fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      create_denom: {
        metadata,
        subdenom
      }
    }, _fee, _memo, _funds);
  };
  changeDenomOwner = async ({
    denom,
    newAdminAddress
  }: {
    denom: string;
    newAdminAddress: string;
  }, _fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      change_denom_owner: {
        denom,
        new_admin_address: newAdminAddress
      }
    }, _fee, _memo, _funds);
  };
  changeAdmin = async ({
    denom,
    newAdminAddress
  }: {
    denom: string;
    newAdminAddress: string;
  }, _fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      change_admin: {
        denom,
        new_admin_address: newAdminAddress
      }
    }, _fee, _memo, _funds);
  };
  mintTokens = async ({
    amount,
    denom,
    mintToAddress
  }: {
    amount: Uint128;
    denom: string;
    mintToAddress: string;
  }, _fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      mint_tokens: {
        amount,
        denom,
        mint_to_address: mintToAddress
      }
    }, _fee, _memo, _funds);
  };
  burnTokens = async ({
    amount,
    burnFromAddress,
    denom
  }: {
    amount: Uint128;
    burnFromAddress: string;
    denom: string;
  }, _fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      burn_tokens: {
        amount,
        burn_from_address: burnFromAddress,
        denom
      }
    }, _fee, _memo, _funds);
  };
  forceTransfer = async ({
    amount,
    denom,
    fromAddress,
    toAddress
  }: {
    amount: Uint128;
    denom: string;
    fromAddress: string;
    toAddress: string;
  }, _fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      force_transfer: {
        amount,
        denom,
        from_address: fromAddress,
        to_address: toAddress
      }
    }, _fee, _memo, _funds);
  };
}