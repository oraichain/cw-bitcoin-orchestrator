/**
 * This file was automatically generated by @oraichain/ts-codegen@0.35.9.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @oraichain/ts-codegen generate command to regenerate this file.
 */

import { Coin, StdFee } from "@cosmjs/amino";
import {
  CosmWasmClient,
  ExecuteResult,
  SigningCosmWasmClient,
} from "@cosmjs/cosmwasm-stargate";
import {
  Addr,
  Binary,
  HeaderConfig,
  Null,
  String,
  Uint32,
  WrappedHeader,
} from "./LightClientBitcoin.types";
export interface LightClientBitcoinReadOnlyInterface {
  contractAddress: string;
  headerConfig: () => Promise<HeaderConfig>;
  headerHeight: () => Promise<Uint32>;
  network: () => Promise<String>;
  sidechainBlockHash: () => Promise<String>;
  verifyTxWithProof: ({
    btcHeight,
    btcProof,
    btcTx,
  }: {
    btcHeight: number;
    btcProof: Binary;
    btcTx: Binary;
  }) => Promise<Null>;
}
export class LightClientBitcoinQueryClient
  implements LightClientBitcoinReadOnlyInterface
{
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.headerConfig = this.headerConfig.bind(this);
    this.headerHeight = this.headerHeight.bind(this);
    this.network = this.network.bind(this);
    this.sidechainBlockHash = this.sidechainBlockHash.bind(this);
    this.verifyTxWithProof = this.verifyTxWithProof.bind(this);
  }

  headerConfig = async (): Promise<HeaderConfig> => {
    return this.client.queryContractSmart(this.contractAddress, {
      header_config: {},
    });
  };
  headerHeight = async (): Promise<Uint32> => {
    return this.client.queryContractSmart(this.contractAddress, {
      header_height: {},
    });
  };
  network = async (): Promise<String> => {
    return this.client.queryContractSmart(this.contractAddress, {
      network: {},
    });
  };
  sidechainBlockHash = async (): Promise<String> => {
    return this.client.queryContractSmart(this.contractAddress, {
      sidechain_block_hash: {},
    });
  };
  verifyTxWithProof = async ({
    btcHeight,
    btcProof,
    btcTx,
  }: {
    btcHeight: number;
    btcProof: Binary;
    btcTx: Binary;
  }): Promise<Null> => {
    return this.client.queryContractSmart(this.contractAddress, {
      verify_tx_with_proof: {
        btc_height: btcHeight,
        btc_proof: btcProof,
        btc_tx: btcTx,
      },
    });
  };
}
export interface LightClientBitcoinInterface
  extends LightClientBitcoinReadOnlyInterface {
  contractAddress: string;
  sender: string;
  relayHeaders: (
    {
      headers,
    }: {
      headers: WrappedHeader[];
    },
    _fee?: number | StdFee | "auto",
    _memo?: string,
    _funds?: Coin[]
  ) => Promise<ExecuteResult>;
  updateHeaderConfig: (
    {
      config,
    }: {
      config: HeaderConfig;
    },
    _fee?: number | StdFee | "auto",
    _memo?: string,
    _funds?: Coin[]
  ) => Promise<ExecuteResult>;
  updateConfig: (
    {
      owner,
    }: {
      owner?: Addr;
    },
    _fee?: number | StdFee | "auto",
    _memo?: string,
    _funds?: Coin[]
  ) => Promise<ExecuteResult>;
}
export class LightClientBitcoinClient
  extends LightClientBitcoinQueryClient
  implements LightClientBitcoinInterface
{
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(
    client: SigningCosmWasmClient,
    sender: string,
    contractAddress: string
  ) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.relayHeaders = this.relayHeaders.bind(this);
    this.updateHeaderConfig = this.updateHeaderConfig.bind(this);
    this.updateConfig = this.updateConfig.bind(this);
  }

  relayHeaders = async (
    {
      headers,
    }: {
      headers: WrappedHeader[];
    },
    _fee: number | StdFee | "auto" = "auto",
    _memo?: string,
    _funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        relay_headers: {
          headers,
        },
      },
      _fee,
      _memo,
      _funds
    );
  };
  updateHeaderConfig = async (
    {
      config,
    }: {
      config: HeaderConfig;
    },
    _fee: number | StdFee | "auto" = "auto",
    _memo?: string,
    _funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        update_header_config: {
          config,
        },
      },
      _fee,
      _memo,
      _funds
    );
  };
  updateConfig = async (
    {
      owner,
    }: {
      owner?: Addr;
    },
    _fee: number | StdFee | "auto" = "auto",
    _memo?: string,
    _funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        update_config: {
          owner,
        },
      },
      _fee,
      _memo,
      _funds
    );
  };
}
